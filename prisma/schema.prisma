// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  email           String      @unique
  name            String?
  wallet_address  String
  password        String
  role            Role        @default(USER)
  isEmailVerified Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Token           Token[]
  threads         Thread[]
  events          Event[]

}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}


model Event {
  id          Int      @id @default(autoincrement())
  unique_id   String   @default(uuid())
  title       String
  description String
  expiry_date DateTime

  status EventStatus @default(ACTIVE)

  // To community
  community  String[]

  // created by
  user   User @relation(fields: [userID], references: [id])
  userID Int

  // Threads
  threads   Thread[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Thread {
  id        Int    @id @default(autoincrement())
  unique_id String @default(uuid())
  message   String

  // Event ID
  event   Event @relation(fields: [eventID], references: [id])
  eventID Int

  // User id
  user   User? @relation(fields: [userID], references: [id])
  userID Int?

  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  USER
  VOTERS
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum EventStatus {
  ACTIVE
  EXPIRED
  CLOSED
}
