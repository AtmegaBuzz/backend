// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  about           String            @db.Text
  wallet_address  String            @unique
  role            Role              @default(USER)
  profile_pic     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  playmoney       Int               @default(1000)
  Token           Token[]
  threads         Thread[]
  events          Event[]
  trades          Trade[]
  token_allocated TokenAllocation[]
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model Event {
  id                  Int       @id @default(autoincrement())
  unique_id           String    @default(uuid())
  question            String
  description         String
  expiry_date         DateTime
  outcomes            Outcome[]
  resolution_criteria String    @db.Text
  image               String

  status     EventStatus @default(ACTIVE)
  outcomeWon Int?

  // To community
  community String[]

  // created by
  user   User @relation(fields: [userID], references: [id])
  userID Int

  // Threads
  threads Thread[]

  // Trades done
  trades Trade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Outcome {
  id               Int               @id @default(autoincrement())
  outcome_title    String
  current_supply   Int               @default(0)
  total_liquidity  Int               @default(0)
  event            Event             @relation(fields: [eventID], references: [id])
  eventID          Int
  tokenAllocations TokenAllocation[]
  trades           Trade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TokenAllocation {
  id        Int     @id @default(autoincrement())
  amount    Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  outcome   Outcome @relation(fields: [outcomeId], references: [id])
  outcomeId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, outcomeId])
}

model Trade {
  id        Int    @id @default(autoincrement())
  unique_id String @default(uuid())

  order_type OrderType @default(BUY)
  order_size Int       @default(0)
  amount     Int       @default(0)

  price Int @default(0) // price at which an asset was bought

  // Trade happened on
  event   Event? @relation(fields: [eventID], references: [id])
  eventID Int?

  outcome   Outcome? @relation(fields: [outcomeId], references: [id])
  outcomeId Int?

  // Trade done by
  user   User? @relation(fields: [userID], references: [id])
  userID Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Thread {
  id        Int     @id @default(autoincrement())
  unique_id String  @default(uuid())
  message   String
  image     String?

  // Event ID
  event   Event @relation(fields: [eventID], references: [id])
  eventID Int

  // User id
  user   User? @relation(fields: [userID], references: [id])
  userID Int?

  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  USER
  VOTERS
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum EventStatus {
  ACTIVE
  EXPIRED
  CLOSED
}

enum EventOption {
  OPTION_A
  OPTION_B
}

enum OrderType {
  BUY
  SELL
}
