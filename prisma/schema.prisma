// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  about          String   @db.Text
  wallet_address String   @unique
  role           Role     @default(USER)
  profile_pic    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Token          Token[]
  threads        Thread[]
  events         Event[]
  trades         Trade[]
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model Event {
  id                  Int      @id @default(autoincrement())
  unique_id           String   @default(uuid())
  question            String
  description         String
  expiry_date         DateTime
  option_a            String
  option_b            String
  resolution_criteria String   @db.Text
  image               String

  status EventStatus @default(ACTIVE)

  // To community
  community String[]

  // created by
  user   User @relation(fields: [userID], references: [id])
  userID Int

  // Threads
  threads Thread[]

  // Trades done
  trades Trade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trade {
  id        Int    @id @default(autoincrement())
  unique_id String @default(uuid())

  option     EventOption @default(OPTION_A)
  order_type OrderType   @default(BUY)
  order_size Int
  amount     Int

  // Trade happened on
  event   Event @relation(fields: [eventID], references: [id])
  eventID Int

  // Trade done by
  user   User? @relation(fields: [userID], references: [id])
  userID Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Thread {
  id        Int    @id @default(autoincrement())
  unique_id String @default(uuid())
  message   String
  image     String?

  // Event ID
  event   Event @relation(fields: [eventID], references: [id])
  eventID Int

  // User id
  user   User? @relation(fields: [userID], references: [id])
  userID Int?

  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  USER
  VOTERS
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum EventStatus {
  ACTIVE
  EXPIRED
  CLOSED
}

enum EventOption {
  OPTION_A
  OPTION_B
}

enum OrderType {
  BUY
  SELL
}
